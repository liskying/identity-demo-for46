<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultError" xml:space="preserve">
    <value>An unknown failure has occured.</value>
    <comment>默认身份验证结果错误消息</comment>
  </data>
  <data name="DuplicateEmail" xml:space="preserve">
    <value>Email '{0}' is already taken.</value>
    <comment>邮箱重复</comment>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>Name {0} is already taken.</value>
    <comment>用户名重复</comment>
  </data>
  <data name="ExternalLoginExists" xml:space="preserve">
    <value>A user with that external login already exists.</value>
    <comment>具有外部登录的用户已经存在</comment>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Email '{0}' is invalid.</value>
    <comment>邮箱无效</comment>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Invalid token.</value>
    <comment>令牌无效</comment>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>User name {0} is invalid, can only contain letters or digits.</value>
    <comment>用户名只能包含字母或数字</comment>
  </data>
  <data name="LockoutNotEnabled" xml:space="preserve">
    <value>Lockout is not enabled for this user.</value>
    <comment>未启用锁定</comment>
  </data>
  <data name="NoTokenProvider" xml:space="preserve">
    <value>No IUserTokenProvider is registered.</value>
    <comment>没有令牌提供者</comment>
  </data>
  <data name="NoTwoFactorProvider" xml:space="preserve">
    <value>No IUserTwoFactorProvider for '{0}' is registered.</value>
    <comment>没有双因素认证提供者</comment>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>Incorrect password.</value>
    <comment>密码不正确</comment>
  </data>
  <data name="PasswordRequireDigit" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9').</value>
    <comment>密码必须包含数字</comment>
  </data>
  <data name="PasswordRequireLower" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z').</value>
    <comment>密码无小写字母</comment>
  </data>
  <data name="PasswordRequireNonLetterOrDigit" xml:space="preserve">
    <value>Passwords must have at least one non letter or digit character.</value>
    <comment>密码没有足够的字母或数字字符</comment>
  </data>
  <data name="PasswordRequireUpper" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z').</value>
    <comment>密码没有大写字母</comment>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>Passwords must be at least {0} characters.</value>
    <comment>密码太短</comment>
  </data>
  <data name="PropertyTooShort" xml:space="preserve">
    <value>{0} cannot be null or empty.</value>
    <comment>不能为空</comment>
  </data>
  <data name="RoleNotFound" xml:space="preserve">
    <value>Role {0} does not exist.</value>
    <comment>角色已存在</comment>
  </data>
  <data name="StoreNotIQueryableRoleStore" xml:space="preserve">
    <value>Store does not implement IQueryableRoleStore&lt;TRole&gt;.</value>
    <comment>没有实现IQueryableRoleStore&lt;TRole&gt;接口</comment>
  </data>
  <data name="StoreNotIQueryableUserStore" xml:space="preserve">
    <value>Store does not implement IQueryableUserStore&lt;TUser&gt;.</value>
    <comment>没有实现IQueryableUserStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserClaimStore" xml:space="preserve">
    <value>Store does not implement IUserClaimStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserClaimStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserConfirmationStore" xml:space="preserve">
    <value>Store does not implement IUserConfirmationStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserConfirmationStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserEmailStore" xml:space="preserve">
    <value>Store does not implement IUserEmailStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserEmailStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserLockoutStore" xml:space="preserve">
    <value>Store does not implement IUserLockoutStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserLockoutStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserLoginStore" xml:space="preserve">
    <value>Store does not implement IUserLoginStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserLoginStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserPasswordStore" xml:space="preserve">
    <value>Store does not implement IUserPasswordStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserPasswordStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserPhoneNumberStore" xml:space="preserve">
    <value>Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserPhoneNumberStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserRoleStore" xml:space="preserve">
    <value>Store does not implement IUserRoleStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserRoleStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserSecurityStampStore" xml:space="preserve">
    <value>Store does not implement IUserSecurityStampStore&lt;TUser&gt;.</value>
    <comment>没有实现IUserSecurityStampStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="StoreNotIUserTwoFactorStore" xml:space="preserve">
    <value>Store does not implement IUserTwoFactorStore&lt;TUser&gt;.</value>
    <comment>没有实现 IUserTwoFactorStore&lt;TUser&gt;接口</comment>
  </data>
  <data name="UserAlreadyHasPassword" xml:space="preserve">
    <value>User already has a password set.</value>
    <comment>添加密码时密码已存在</comment>
  </data>
  <data name="UserAlreadyInRole" xml:space="preserve">
    <value>User already in role.</value>
    <comment>用户已属该角色</comment>
  </data>
  <data name="UserIdNotFound" xml:space="preserve">
    <value>UserId not found.</value>
    <comment>用户ID无效</comment>
  </data>
  <data name="UserNameNotFound" xml:space="preserve">
    <value>User {0} does not exist.</value>
    <comment>用户不存在</comment>
  </data>
  <data name="UserNotInRole" xml:space="preserve">
    <value>User is not in role.</value>
    <comment>用户不属该角色</comment>
  </data>
</root>